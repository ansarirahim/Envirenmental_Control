/*
  Blink

  Turns an LED on for one second, then off for one second, repeatedly.

  Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO
  it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to
  the correct LED pin independent of which board is used.
  If you want to know what pin the on-board LED is connected to on your Arduino
  model, check the Technical Specs of your board at:
  https://www.arduino.cc/en/Main/Products

  modified 8 May 2014
  by Scott Fitzgerald
  modified 2 Sep 2016
  by Arturo Guadalupi
  modified 8 Sep 2016
  by Colby Newman

  This example code is in the public domain.

  https://www.arduino.cc/en/Tutorial/BuiltInExamples/Blink
*/
#define TEMP_RELAY 7
#define CO2_RELAY 5
#define HUMIDITY_RELAY 4  //TESTED

#define EXT_RELAY 6
#define TX_ENABLE 9
#define ON_TIME 5000
#define OFF_TIME 5000

#define RX1 11
#define TX1 10
unsigned char buffer[100];
// the loop function runs over and over again forever
// int numBytes;
// //unsigned char buffer[100];
// unsigned char serIn;
// const byte HEADER_BYTE_1 = 0x5A;
// const byte HEADER_BYTE_2 = 0xA5;
// const byte PAYLOAD_LENGTH = 5;

// byte state = 0;
// byte payloadIndex = 0;
// byte payload[PAYLOAD_LENGTH];

void GPIO_Initialization() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(CO2_RELAY, OUTPUT);
  pinMode(HUMIDITY_RELAY, OUTPUT);
  pinMode(TEMP_RELAY, OUTPUT);
  pinMode(EXT_RELAY, OUTPUT);
  pinMode(TX_ENABLE, OUTPUT);
}
void defaultStateofGPIO() {
  digitalWrite(CO2_RELAY, LOW);
  digitalWrite(TEMP_RELAY, LOW);
  digitalWrite(HUMIDITY_RELAY, LOW);
  digitalWrite(EXT_RELAY, LOW);
  digitalWrite(TX_ENABLE, LOW);  //RS485 RX MODE
}
// the setup function runs once when you press reset or power the board
void setup() {
  GPIO_Initialization();
  defaultStateofGPIO();
  Serial1.begin(115200, SERIAL_8N1, RX1, TX1);
  Serial.begin(115200);  //, SERIAL_8N1, RX1, TX1);
  Serial.println("Hello my dear\n");
}

const byte HEADER_BYTE_1 = 0x5A;
const byte HEADER_BYTE_2 = 0xA5;
const byte MAX_PAYLOAD_LENGTH = 8;

enum State {
  WAITING_HEADER,
  RECEIVING_PAYLOAD
};

State state = WAITING_HEADER;
byte payload[MAX_PAYLOAD_LENGTH];
byte payloadIndex = 0;
byte payloadLength = 0;
int i, len;
unsigned int humidity, co2, temperature, presetHumidity, presetCo2, presetTemperature;
void processPacket(unsigned char* uart_data, unsigned int data_length) {
  // int data_length = sizeof(uart_data);
  int i = 0;
  while (i < data_length) {
    if ((uart_data[i] == 0x5a) && (uart_data[i + 1] == 0xa5)) {
      switch (uart_data[i + 2]) {

        case 0x03:  //data length =3
          {
            if ((uart_data[i + 4] == 0x4F) && (uart_data[i + 4] == 0x4B))  //{A5}{03}{82}{4F}{4B}
              printf("Display responded");
            break;
          }
        case 0x05:  // Data Length = 5
          {
            switch (uart_data[i + 3]) {
              case 0x82:  // Command = Display Write
                {
                  switch (uart_data[i + 4]) {
                    case 0x20:  // co2
                      co2 = (((unsigned int)uart_data[i + 6]) << 8) | uart_data[i + 7];
                      printf("Measured Co2* = %u\n", co2);  //(((unsigned int)uart_data[i + 6]) << 8) | uart_data[i + 7]);
                      i += 7;
                      break;
                    case 0x10:  // Temperature
                      temperature = (((unsigned int)uart_data[i + 6]) << 8) | uart_data[i + 7];
                      printf("Measured Temperature* = %u\n", temperature);
                      i += 7;

                      break;
                    case 0x15:                                                                //humidity                                                      // CO2
                      humidity = (((unsigned int)uart_data[i + 6]) << 8) | uart_data[i + 7];  //
                      printf("Measured Humidity* = %u\n", humidity);
                      i += 7;
                      break;
                    default:
                      break;
                  }
                  break;
                }
            }
            break;
          }
        case 0x06:  // Data Length = 6
          {
            switch (uart_data[i + 3]) {
              case 0x83:  // Command = Display Read
                {
                  switch (uart_data[i + 4]) {
                    case 0x25:  // Preset Temperature
                      presetTemperature = (((unsigned int)uart_data[i + 7]) << 8) | uart_data[i + 8];

                      if (temperature && presetTemperature) {
                        if (temperature > presetTemperature) {



                          digitalWrite(TEMP_RELAY, HIGH);

                          printf("TEMPERATURE RELAY IS ON\n");

                        } else {
                          printf("TEMPERATURE RELAY IS Off\n");
                          digitalWrite(TEMP_RELAY, LOW);
                        }
                        printf("Preset Temperature = %u\n", presetTemperature);  //
                      }
                      i += 8;

                      break;
                    case 0x30:  // Preset CO2
                      presetHumidity = (((unsigned int)uart_data[i + 7]) << 8) | uart_data[i + 8];
                      if (presetHumidity && humidity) {
                        printf("Preset Humidity = %u\n", presetHumidity);  //
                        if (humidity > presetHumidity) {

                          digitalWrite(HUMIDITY_RELAY, HIGH);

                          printf("Humidity RELAY IS ON\n");
                        } else {
                          printf("Humidity RELAY IS OFF\n");

                          digitalWrite(HUMIDITY_RELAY, LOW);
                        }
                      }
                      i += 8;
                      break;
                    case 0x35:                                                                 // Preset Humidity
                      presetCo2 = (((unsigned int)uart_data[i + 7]) << 8) | uart_data[i + 8];  //

                      i += 8;
                      if (presetCo2 && co2) {
                        printf("Preset Co2 = %u\n", presetCo2);
                        if (co2 > presetCo2) {
                          printf("CO2 RELAY IS ON\n");

                          digitalWrite(CO2_RELAY, HIGH);

                        } else {
                          printf("CO2 RELAY IS Off\n");
                          digitalWrite(CO2_RELAY, LOW);
                        }
                      }
                      break;
                    default:
                      break;
                  }
                  break;
                }
            }
            break;
          }
        default:
          break;
      }
    }
    i++;
  }
}

void loop() {
  len = Serial1.available();
  if (len)
  //Serial1.println(len);
  {
    Serial1.readBytes(buffer, len);
    processPacket(buffer, len);
  }
}
